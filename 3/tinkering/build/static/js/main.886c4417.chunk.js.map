{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","_ref","note","toggleImportance","label","important","react_default","a","createElement","className","content","onClick","services_notes","axios","get","then","response","data","newObject","post","id","put","concat","Notification","message","App","_useState","useState","_useState2","Object","slicedToArray","notes","setNotes","_useState3","_useState4","newNote","setNewNote","_useState5","_useState6","showAll","setShowAll","_useState7","_useState8","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","components_Notification","map","components_Note","key","find","n","changedNote","objectSpread","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","value","onChange","target","type","style","color","fontStyle","fontSize","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.886c4417.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n\tconst label = note.important\n\t\t? 'make not important' : 'make important'\n\n    return (\n\t\t<li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n\t\t</li>\n    )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = '/notes'\n\nconst getAll = () => {\n\tconst request = axios.get(baseUrl)\n\treturn request.then(response => {\n    return response.data\n  })\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\n\nexport default { getAll, create, update }","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import React, {useState, useEffect} from 'react'\nimport axios from 'axios'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport './index.css'\nimport Notification from './components/Notification'\n\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('virhe...')\n\n  const Footer = () => {\n    const footerStyle = {\n      color: 'green',\n      fontStyle: 'italic',\n      fontSize: 16\n    }\n  \n    return (\n      <div style={footerStyle}>\n        <br />\n        <em>Note app, Department of Computer Science 2019</em>\n      </div> \n    )\n  }\n\n\tconst hook = () => {\n    console.log('effect')\n    axios\n\t\t  .get('http://localhost:3001/notes')\n\t\t  .then(response => {\n\t\t\t  console.log('promise fulfilled')\n\t\t\t  setNotes(response.data)\n\t\t  })\n  }\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = {...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote).then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `muistiinpano ${note.content} on poistettu palvelimelta`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const rows = () => notesToShow.map(note =>\n    <Note\n      key={note.id}\n      note={note}\n      toggleImportance={() => toggleImportanceOf(note.id)}\n    />\n  )\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  return (\n    <div>\n      <h1>Muistiinpanot</h1>\n\n      <Notification message={errorMessage} />\n\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n        n채yt채 {showAll ? 'vain t채rke채t' : 'kaikki'}\n        </button>\n      </div>\n      <ul>\n        {rows()}\n      </ul>\n      <form onSubmit={addNote}>\n        <input \n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">tallenna</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}